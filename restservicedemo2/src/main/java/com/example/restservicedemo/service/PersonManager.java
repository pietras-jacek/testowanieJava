package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.restservicedemo.domain.Car;
import com.example.restservicedemo.domain.Person;

public class PersonManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PERSON = "CREATE TABLE Person(p_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yob integer)";
	private static final String CREATE_TABLE_CAR = "CREATE TABLE Car(c_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, model varchar(20), yop integer, owner_id bigint FOREIGN KEY references Person(p_id))";

	private PreparedStatement addPersonStmt;

	private PreparedStatement addCarIdStmt;
	private PreparedStatement addCarStmt;
	private PreparedStatement sellCarStmt;

	private PreparedStatement deleteAllPersonsStmt;
	private PreparedStatement deletePersonStmt;
	private PreparedStatement getAllPersonsStmt;
	private PreparedStatement getPersonByIdStmt;

	private PreparedStatement getAllPersonsWithCarsStmt;
	private PreparedStatement getCarWithOwnerStmt;
	private PreparedStatement getAllCarsStmt;
	private PreparedStatement deleteAllCarsStmt;
	private PreparedStatement getCarByIdStmt;
	private PreparedStatement addCarWithIdOwnerStmt;
	private PreparedStatement deleteCarStmt;
	
	private PreparedStatement createPersonTableStmt;
	private PreparedStatement dropPersonTableStmt;
	private PreparedStatement createCarTableStmt;
	private PreparedStatement dropCarTableStmt;
	
	private PreparedStatement getAllCarsWithOwnerStmt;
	

	private Statement statement;

	public PersonManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PERSON);

			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_CAR);

			addPersonStmt = connection.prepareStatement("INSERT INTO Person (p_id, name, yob) VALUES (?, ?, ?)");
			deleteAllPersonsStmt = connection.prepareStatement("DELETE FROM Person");
			deletePersonStmt = connection.prepareStatement("DELETE FROM Person where p_id = ?");
			getAllPersonsStmt = connection.prepareStatement("SELECT p_id, name, yob FROM Person");
			getPersonByIdStmt = connection.prepareStatement("SELECT p_id, name, yob FROM Person where p_id = ?");

			addCarStmt = connection.prepareStatement("INSERT INTO Car (model, yop) VALUES (?, ?)");

			sellCarStmt = connection.prepareStatement("UPDATE Car SET owner_id = ? WHERE c_id = ?");

			getAllPersonsWithCarsStmt = connection.prepareStatement(
					"SELECT p_id, name, yob, c_id, model, yop, owner_id FROM Person JOIN Car ON owner_id = p_id");

			getCarWithOwnerStmt = connection.prepareStatement(
					"SELECT p_id, name, yob, c_id, model, yop, owner_id FROM Person JOIN Car ON c_id = ?");

			getAllCarsStmt = connection.prepareStatement("SELECT c_id, model, yop FROM Car");
			
			deleteAllCarsStmt = connection.prepareStatement("DELETE FROM Car");
			
			deleteCarStmt = connection.prepareStatement("DELETE FROM Car where c_id = ?");
			
			getCarByIdStmt = connection.prepareStatement("SELECT c_id, model, yop FROM Car where c_id = ?");
			
			addCarIdStmt = connection.prepareStatement("INSERT INTO Car (c_id, model, yop) VALUES (?, ?, ?)");
			
			addCarWithIdOwnerStmt = connection.prepareStatement("INSERT INTO Car (c_id, model, yop, owner_id) VALUES (?, ?, ?, ?)");
			
			createPersonTableStmt = connection.prepareStatement(CREATE_TABLE_PERSON);
			dropPersonTableStmt = connection.prepareStatement("DROP TABLE Person");
			
			createCarTableStmt = connection.prepareStatement(CREATE_TABLE_CAR);
			dropCarTableStmt = connection.prepareStatement("DROP TABLE Car");
			
			getAllCarsWithOwnerStmt = connection.prepareStatement("SELECT c_id, model, yop, owner_id FROM Car");
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearPersons() {
		try {
			deleteAllPersonsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void clearPerson(Long id) {
        try {
        	deletePersonStmt.setLong(1, id);
            deletePersonStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

	public int addPerson(Person person) {
		int count = 0;
		try {
			addPersonStmt.setLong(1, person.getId());
			addPersonStmt.setString(2, person.getFirstName());
			addPersonStmt.setInt(3, person.getYob());

			count = addPersonStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Person> getAllPersons() {
		List<Person> persons = new ArrayList<Person>();

		try {
			ResultSet rs = getAllPersonsStmt.executeQuery();

			while (rs.next()) {
				Person p = new Person();
				p.setId(rs.getInt("p_id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

	public Person getPerson(Long id) {
		Person p = new Person();
		try {
			getPersonByIdStmt.setLong(1, id);
			ResultSet rs = getPersonByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("p_id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}
	
	public void clearCars() {
		try {
			deleteAllCarsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public void clearCar(Long id) {
        try {
        	deleteCarStmt.setLong(1, id);
            deleteCarStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

	public int addCar(Car car) {
		int count = 0;
		try {
			addCarStmt.setString(1, car.getModel());
			addCarStmt.setInt(2, car.getYop());

			count = addCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int addCarWithId(Car car) {
		int count = 0;
		try {
			addCarIdStmt.setLong(1, car.getId());
			addCarIdStmt.setString(2, car.getModel());
			addCarIdStmt.setInt(3, car.getYop());

			count = addCarIdStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int addCarWithIdOwner(Car car) {
		int count = 0;
		
		try {
			addCarWithIdOwnerStmt.setLong(1, car.getId());
			addCarWithIdOwnerStmt.setString(2, car.getModel());
			addCarWithIdOwnerStmt.setInt(3, car.getYop());
			addCarWithIdOwnerStmt.setLong(4, car.getOwner().getId());
			
			count = addCarWithIdOwnerStmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public Car getCar(Long id) {
		Car c = new Car();
		try {
			getCarByIdStmt.setLong(1, id);
			ResultSet rs = getCarByIdStmt.executeQuery();

			while (rs.next()) {
				c.setId(rs.getInt("c_id"));
				c.setModel(rs.getString("model"));
				c.setYop(rs.getInt("yop"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return c;
	}

	public Map<Person, List<Car>> getPersonWithCar() {

		List<Car> cars = new ArrayList<Car>();

		Map<Person, List<Car>> result = new HashMap<>();

		try {
			ResultSet rs = getAllPersonsWithCarsStmt.executeQuery();

			while (rs.next()) {

				Person p = new Person();

				p.setId(rs.getInt("p_id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));

				Car c = new Car();
				c.setId(rs.getInt("c_id"));
				c.setModel(rs.getString("model"));
				c.setYop(rs.getInt("yop"));

				c.setOwner(p);

				if (result.containsKey(p)) {
					cars = result.get(p);
					cars.add(c);
				} else {
					cars = new ArrayList<>();
					cars.add(c);
					result.put(p, cars);
				}

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public Car getCarWithOwner(Car car) {

		Car c = new Car();
		try {
			
			getCarWithOwnerStmt.setLong(1, car.getId());
			ResultSet rs = getCarWithOwnerStmt.executeQuery();

			while (rs.next()) {

				Person p = new Person();

				p.setId(rs.getInt("p_id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));

				c.setId(rs.getInt("c_id"));
				c.setModel(rs.getString("model"));
				c.setYop(rs.getInt("yop"));

				c.setOwner(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return c;
	}
	
	public int sellCar(Car car, Person person) {
		int count = 0;
		try {
			
			sellCarStmt.setLong(1, person.getId());
			sellCarStmt.setLong(2, car.getId());
			

			count = sellCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Car> getAllCars() {
		
		List<Car> cars = new ArrayList<Car>();

		try {
			ResultSet rs = getAllCarsStmt.executeQuery();

			while (rs.next()) {
				Car c = new Car();
				c.setId(rs.getInt("c_id"));
				c.setModel(rs.getString("model"));
				c.setYop(rs.getInt("yop"));
				cars.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cars;
	}
	
	public List<Car> getAllCarsWithOwner() {
		
		List<Car> cars = new ArrayList<Car>();

		try {
			ResultSet rs = getAllCarsWithOwnerStmt.executeQuery();

			while (rs.next()) {
				Car c = new Car();
				c.setId(rs.getInt("c_id"));
				c.setModel(rs.getString("model"));
				c.setYop(rs.getInt("yop"));
				
				Person owner = new Person();
				owner.setId(rs.getLong("owner_id"));
				c.setOwner(owner);
				
				cars.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return cars;
	}
	
	public void createPersonTable() {
		try {
			createPersonTableStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void dropPersonTable() {
		try {
			dropPersonTableStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void createCarTable() {
		try {
			createCarTableStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void dropCarTable() {
		try {
			dropCarTableStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
}
